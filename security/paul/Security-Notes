ROOT Account - best practices
- Dont generate access keys - or remove them,
    - cycle them if they are absolutely needed
- Use a HSM for root account
- Create users/groups and do all administration through a user in admin group

General IAM recommendations

- Assign policies (and permissions) to groups,
- Assign users to groups

- Create roles for services
- Assign policies to roles
- Assign roles to groups

You can assume roles - you cannot assume a group

General Advice

Readonly is also dangerous, as it exposes data - which perhaps shouldnt be exposed ie. Tesco's parking app giving access to millions of car registration plates...

Letterbox analogy
- Put letters in, cannot see other letters, nor letter deposited ie. like a write Only policy

WARNING!!
Local cookies give access to resources - a compromised system could mean that cookies are taken and a bad actor can use them maliciously

Tail-Gating through a security gate
- Is like using somebody else's access rights

Principal of Least security

Principal to limit blast radius if something is compromised

Browser ideas (Chrome)
- Setup personas to allow using different IDs ie. in the same service

Envelope Security

Port Knocking is like Hagrid opening door in Harry Potter - presses a bunch of stones (ports) before real door (ie. port 22) is presented

Loris exploit - opens connections and makes slow requests, ultimately choking available sessions (even though ie. instance CPU is inactive)

Create ACCESS policies

4 Parts of a typical Policy
- Effect
- Action
- Resource
- Condition

Generally there will be a bunch of allow definitions and a final deny scope...
- Deny rules ALWAYS override allow Rules
- Policies can be layered (or combined)
- Need to define policy based on business requirements of the process
    - Only ever give as few privileges as needed

Typically name services and users so it is easy to identify a user or services
ie. user.$USERNAME, service.$SERVICENAME

Typically services only require very specific access, whereas users have more privileges. At least if a service with a few privs is compromised, it has a relatively small blast radius...

For users, regularly recycle keys to prevent long-term compromise if the keys are leaked...

Example AWS service = STS (Security Token Service) - gives tokens that allow users to assume other roles ie. perform different tasks than their default policy allows

Complexity of creating new policies

AWS Organisations
- Allow definition of sub-OUs using different SCP policies
- All billing goes to the root account

- SCP = Service Control Policy
   - Can influence root behaviour in sub-OUs
   - Delivers over-arching policies driving different sub-OUs
   - One of the things that can control root accounts
      - root accounts arent controlled by IAM policies

Master account
      |
  Organisations                    <- Like an IAM group
   |    |     |
Child  Dev  Accounts

Security Considerations for Common DevOps tools

Issue when using tools like JENKINS in environments, is that the JENKINS instance gets GOD mode,

Could use AWS Code Pipeline etc tools, which are managed services, as these are much better supported from IAM (vs no real IAM with JENKINS). This means

TERRAFORM is another thing that effectively has GOD mode for provisioning. Could use CloudFormation. This has IAM roles, can use MFA when on the console, and can use Service Catalog. We can use a SC wrapper around various components requiring permissions, then

AWS Security Services/Tools

DDOS attacks - Cloudfront can act as a filter and stops DDOS traffic

AWS Shield / WAF

AWS GuardDuty - VPC flow logs, Route 53 requests
  - Alerts if unusual activity detected
  - Can be used to pass all alerts/events to a central GuardDuty server
  - Behind the scenes, GD watches traffic for all accounts, thus it learns over time

Beyond S3 and EBS, applications are generally one of the biggest security

AWS Inspector
  - Will analyse ie. an EC2 instance (maybe ECS in future) and check if any known vulnerabilities exist

WAF - Web Application filter
  - Rules that are put in front of service
     - Either in front CloudFront or LoadBalancer


Risk Register
- Documentation when risks are highlighted in a team


Discussion on mirroring repos to S3 buckets. Will mean that traffic to access repo <> need to go outside AWS. This means that external issues with REPO will not impact AWS environment.

Then have the issue of maintaining the repos in the S3 bucket (updates etc)


LAMBDA and Serverless
- 3 types of fuctions
LAMBDA at edge - runs on edge endpoints around the world
  -
Global LAMBDA - run centrally in aws
VPC LAMBDA - functions within the VPC
  - Can only perform what the VPC allows (via definition)

As LAMBDAs are single functions, can tie down permissions at a very granular level ie. per function (with an EC2 instance, permissions for all functions of the system are needed)


Databases

Create a DB that is encrypted for non-searchable fields and use hashing for any searchable fields. Encryption and Hashing is handled by the application.

AWS Cognito - allows lots of users

AWS endpoints
- Can have their own security policies - this means another layer (on top of ie.S3 policies)

AWS Config
- Allows reporting of compliancy of AWS resources across the estate according to whatever rules have been defined

SCP and key policies are the ONLY aspects of AWS where "ROOT" doesnt have control

Boundary Policy -
- Limits the permissions that may be associated with ie. a newly created IAM user. Whatever policy is applied will be inherited by anything down the chain. Similar to SCP in concept.



520  vault status
521  vault secrets enable -path kv kv
522  vault status
523  vault secrets list
525  vault kv put kv/paul value=awesome
526  vault secrets list
527  vault kv get kv/paul
541  vault policy write producer producer.hcl
542  vault policy list
543  vault token create -policy producer
544  vault token create -policy producer -ttl 900

520  vault status
  521  vault secrets enable -path kv kv
  522  vault status
  523  vault secrets list
  525  vault kv put kv/paul value=awesome
  526  vault secrets list
  527  vault kv get kv/paul
  541  vault policy write producer producer.hcl
  542  vault policy list
  543  vault token create -policy producer
  544  vault token create -policy producer -ttl 900
  546  history | grep vault
  547  vault token create -policy producer
  549  VAULT_TOKEN=s.2w9jzskxAWQCyZjCVAr2AKLk vault kv put kv/letterbox value=producer-was-here
  550  vault kv get kv/letterbox
  554  vault policy write consumer consumer.hcl
  556  history|grep vault
  557  vault token create -policy consumer
  558  VAULT_TOKEN=s.NkhMbGvXYUIdCrngOJaPyfYM vault kv get kv/letterbox
  563  history|grep vault
  564  vault policy write producer producer-restricted.hcl
  565  vault policy list
  566  vault token create -policy producer -ttl 900
  567  VAULT_TOKEN=s.eXBOUKJc5tcyxWjjvc35zWgd vault kv put kv/letterbox-asdf value=foo
  568  VAULT_TOKEN=s.eXBOUKJc5tcyxWjjvc35zWgd vault kv put kv/letterbox value=foo
  569  history | grep vault
  571  vault policy read producer-restricted.hcl
  572  vault policy read producer
  574  history|grep vault
