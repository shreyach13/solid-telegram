#!/usr/bin/env groovy
//This pipeline assumes there is only one master node
node {
    stage('Preparation') { // for display purposes
        // Get some code from a GitHub repository
        //The checkout step will checkout a specific branch by specifiying on the branches parameter
        //it will clean up the workspace to ensure that no residual files are left (I have used a htpps link but it should used with its own ssh key)
        //and will clone from the required repo
        checkout([$class: 'GitSCM',
        branches: [[name: 'origin/master']],
        extensions: [[$class: 'WipeWorkspace']],
        userRemoteConfigs: [[url: 'https://github.com/mhristof/solid-telegram.git']]
        ])
        }
    stage('Preparing virtual environment') {
        // Run the build
        // Lets create out venv on python now!
        def installed = fileExists 'bin/activate'
        if (!installed) {
        //This should really be installed...
            sh 'pip3 install virtualenv'
            sh 'virtualenv --no-site-packages ./Python_Example/'
        }
        createVirtualEnv 'env'
        executeIn 'env', 'pip3 install -r requirements.txt'
    }
    stage('Testing') {
      parallel{
        stage('Phase 1'){
          echo "Running and checking tests..."
          //You can get the exit code as well and decide from there, the below is just another example
          def short_results = sh 'results=$(pytest -q test_wallet.py) && echo $results | cut -d'[' -f 2 | cut -d']' -f 1'
          if(short_results != '100%'){
            echo "We got FAILED tests!!! Aborting..."
            sh "exit 1"
          }

        }
        stage ('Phase 2'){
          echo "testing and producing long report..."
          sh 'long_results=$(pytest -r p -v  test_wallet.py) $$ echo $fix_results'
        }
      }

    }
    stage('Deploy') {
        echo "Deploying..."
    }
}

//This will allow us to create a new virtual environment
def createVirtualEnv(String name) {
    sh "virtualenv ${name}"
}

//This function allows to select on which virtual environment we can execute a script
def executeIn(String environment, String script) {
    sh "source ${environment}/bin/activate && " + script
}
